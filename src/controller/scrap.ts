/** @format */

import { NextFunction, Request, Response } from "express";
import { ErrorHandle } from "../util/Error";
import { ScrapCar } from "../model/scrap"; // Assuming you have a Scrap model
import { sendEmail } from "../util/sendMail";

export class ScrapC {
    // Create a new scrap entry
    sendRequest = async (
        req: Request,
        res: Response,
        next: NextFunction
    ): Promise<void> => {
        try {
            const {
                name,
                phoneNumber,
                emailId,
                carBrand,
                model,
                year,
                fuelType,
                city,
            } = req.body;

            // Basic validation
            if (
                !name ||
                !phoneNumber ||
                !emailId ||
                !carBrand ||
                !model ||
                !year ||
                !fuelType ||
                !city
            ) {
                return next(new ErrorHandle("All fields are required", 400));
            }

            const newScrap = new ScrapCar({
                name,
                phoneNumber,
                emailId,
                carBrand,
                model,
                year,
                fuelType,
                city,
            });

            const emailSubject = `ðŸš— New Scrap Car Request - ${carBrand} ${model}`;
            const emailHtml = `
        <div style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px;">
          <table width="100%" cellpadding="0" cellspacing="0" style="max-width: 600px; margin: auto; background: #ffffff; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
            <tr>
              <td style="background-color: #2e86de; padding: 15px; text-align: center; color: #fff;">
                <h2>New Scrap Car Request</h2>
              </td>
            </tr>
            <tr>
              <td style="padding: 20px;">
                <h3 style="color: #333; margin-bottom: 15px;">Customer Details</h3>
                <p><strong>Name:</strong> ${name}</p>
                <p><strong>Phone:</strong> ${phoneNumber}</p>
                <p><strong>Email:</strong> ${emailId}</p>
                <p><strong>City:</strong> ${city}</p>
                <hr style="margin: 20px 0;" />
                <h3 style="color: #333; margin-bottom: 15px;">Car Details</h3>
                <p><strong>Brand:</strong> ${carBrand}</p>
                <p><strong>Model:</strong> ${model}</p>
                <p><strong>Year:</strong> ${year}</p>
                <p><strong>Fuel Type:</strong> ${fuelType}</p>
              </td>
            </tr>
            <tr>
              <td style="background-color: #f1f1f1; text-align: center; padding: 15px; font-size: 13px; color: #777;">
                <p>ðŸ“© This request was automatically generated by Scrap Car Portal.</p>
              </td>
            </tr>
          </table>
        </div>
        `;

            await sendEmail(
                process.env.ADMIN_EMAIL!,
                emailSubject,
                "",
                emailHtml
            );

            await newScrap.save();
            res.status(201).json({
                message: "Scrap request saved successfully",
                data: newScrap,
            });
        } catch (error) {
            if (error instanceof ErrorHandle) {
                res.status(error.statusCode).json({ error: error.message });
            } else {
                console.error("Error saving scrap:", error);
                res.status(500).json({ error: "Internal server error" });
            }
        }
    };

    // Get all scrap entries
    getScraps = async (req: Request, res: Response): Promise<void> => {
        try {
            // Extract page and limit from query parameters, with defaults
            const page = parseInt(req.query.page as string) || 1;
            const limit = parseInt(req.query.limit as string) || 10;

            // Calculate the number of documents to skip
            const skip = (page - 1) * limit;

            // Get total count of documents for pagination metadata
            const total = await ScrapCar.countDocuments();

            // Fetch paginated data
            const scraps = await ScrapCar.find()
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(limit);

            // Calculate total pages
            const totalPages = Math.ceil(total / limit);

            // Return response with pagination metadata
            res.status(200).json({
                status: true,
                data: scraps,
                pagination: {
                    currentPage: page,
                    totalPages,
                    totalItems: total,
                    itemsPerPage: limit,
                    hasNextPage: page < totalPages,
                    hasPrevPage: page > 1,
                },
            });
        } catch (error) {
            console.error("Error fetching scraps:", error);
            res.status(500).json({ error: "Internal server error" });
        }
    };
}

export const scrapController = new ScrapC();
